{\rtf1\ansi\ansicpg1252\deff0{\fonttbl{\f0\fnil\fcharset0 Courier New;}{\f1\fnil\fcharset2 Symbol;}}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\lang1033\b\f0\fs28 Chapter 2 - Acme Car Rental Example\fs22\par
\b0\par
1. Show Car Rental app - branch Chapter2-01-NoAOP\par
2. Show with logging (not AOP) \par
   \tab branch: \b Chapter2-02-Logging-NoAOP\par
\b0    a. console logging\par
   b. manual defensive programming checks on Accrue and Redeem\par
   c. Transactions and retries\par
      - what if more exceptions occur outside of the inner try/catch?\par
\tab d. Handling general exceptions\par
\par
3. Show refactored code (still no AOP) \par
   \tab branch: \b Chapter2-03-NoAOP-RefactoringTheMess\b0\par
   - Pass responsibility to dependencies in services\par
   - Constructor getting kinda cluttered\par
\par
4. More refactoring (Still no AOP, but cleaning up)\par
     branch: \b Chapter2-04-NoAOP-MoreRefactoring\par
\b0\tab - combining transaction and exception handling managers into \par
transaction manager\par
   \tab - still difficult to make changes -- the transaction and exception manager were able to be combined, but that's not always possible.\par
   \tab - signature changes - if you remove or add a parameter, you have to remember to remove or add the defensive programming. Same goes for parameter name changes.\par
   \tab - even with dependencies, what if someone adds a method and forgets to call the transaction manager?\par
\par
5. Refactor with AOP\par
\tab branch: \b Chapter2-05-RefactorWithAOP\par
\b0    \tab - Start with Logging\par
\pard\ri-1800\tx8640      new class 'LoggingAspect' inheriting from OnMethodBoundaryAspect\par
\pard    \tab - add this aspect to Accrue and Redeem\par
   \tab - tag: \b Chapter2-05-BasicMethodLoggingWithAOP\par
\b0        - doesn't give a lot of detail about the arguments\par
   \tab - tag: \b Chapter2-05-BetterMethodLoggingWithAOP\b0\par
       - enhanced the entities with loggable information so\par
\tab     LoggingAspect can log arbitrary arguments\par
   \tab - tag: \b Chapter2-06-AddDefensiveProgrammingAspect\par
\b0    \tab\tab - added aspect for Defensive Programming to check for null arguments\par
\tab\par
\tab - Aspect for Transactions and Retries\par
\tab\tab - Uses MethodInterceptionAspect instead of OnMethodBoundaryAspect\par
\tab\tab   - this runs code \b instead \b0 of the method that's being intercepted\par
\tab\tab   - uses args.Proceed() to call the intercepted method\par
\tab - tag: \b Chapter2-07-AddTransactionManagementAspect\b0\par
\tab\par
\tab - Aspect for Exception Handling\par
\tab - tag: \b Chapter2-08-AddExceptionAspect\b0\par
\par
\tab Now, each cross-cutting concern has its own class, and the \tab service code \b only\b0  contain business logic.\par
\par
\b\par
\par
\b0\fs28 Chapter 3 - Method Interception in Castle DynamicProxy and PostSharp\fs22\par
\tab - Aspects that run code in place of another method whenever that method is called.\par
\tab - used for logging, validation, error handling, etc.\par
\par
\tab branch: \b Chapter3-01-PostSharpMethodInterception\b0\par
\tab New Project: TweetPostSharp\par
\tab - Aspect inherits from MethodInterceptionAspect\par
\tab - in OnInvoke(), args.Proceed() calls the intercepted method.\par
\tab - PostSharp works right after compilation\par
\par
\tab branch: \b Chapter3-02-CastleDynamicProxyMethodInterception\b0\par
\tab New Project: TweetDynamicProxy\par
\tab - Aspect implements IInterceptor, which has one method, Intercept\par
\tab - DynamicProxy works during runtime\par
\tab - Interceptors applied to entire object. It can still target entire methods using IInterceptorSelector though.\par
\tab   1. Create a ProxyGenerator\par
\tab   2. Using ProxyGenerator to apply the interceptor.\par
\b\tab - tag: Chapter3-02-PostSharpMethodInterception\par
\b0\par
\b branch: Chapter3-03-DynamicProxyTransactionAspect\par
\b0\tab - Create service that takes an invoice and does several DB operations\b\par
\b0\tab - 3 methods: Save that always succeeds; Save that succeeds after a retry; Save that always fails\b\par
\b0\tab - Using .NET's Transaction Scope, there is no explicit Rollback; there is only Dispose(). If you dispose scope before doing a Complete(), it will be rolled back. So we add a call to Dispose in the transaction interceptor.\par
\b\tab - tag: Chapter3-04-DynamicProxyTransactionsInitial\par
\b0\par
\tab - To do retries, we'll put looping in the Intercept call.\par
\tab - We put retries as a constructor parameter in the aspect class.\par
\tab - We also log the method name when retrying using invocation.Method.Name\par
\b\tab - tag: Chapter3-05-DynamicProxyTransactionsBetter\b0\par
\par
\tab .NET Threading Example\par
\b\tab branch: Chapter3-04-UIThreadsInterception\par
\b0\tab - project: UIThreadingExample\par
\tab Long-running tasks in Win Forms make the UI hang unless you dispatch them to a separate thread. (can demo, but not in Debug mode)\par
\tab Our example is updating a UI control from a worker thread, which is a bad idea. Only the UI thread should do this.\par
\tab\par
\tab We should check to see if we're running on the UI thread.\par
\b\tab - tag: Chapter3-06-UIThreading-UpdateFromWrongThread\tab\b0\par
\tab\par
\tab To do this correctly, use Invoke() and InvokeRequired()\par
\b\tab - tag: Chapter3-07-UIThreading-InvokeCorrectly\b0\par
\tab\par
\tab Now our business logic is polluted with code that has to care about whether it's a worker thread or the UI thread. And the fact that the button's click handler has to create Threads is cluttered.\par
\par
\tab We can make aspects in PostSharp so we don't keep having to use InvokeRequired(). Wouldn't it be cool if we could decorate methods with [WorkerThread] or [UIThread] and have that do the hard work?\par
\par
\tab Interceptors: WorkerThread, UIThread\par
\tab\par
\tab We pass the work of creating a thread to the WorkerThread, and the UIThread aspect can do the checking of which thread it's being invoked from.\par
\b\tab - tag: Chapter3-08-UIThreading-ThreadingAspectsAdded\par
\b0\par
\par
\b\fs28 Chapter 4 - Method Interception vs Method Bounding\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\b0\fs24 1 - Boundary Aspects\par
\b{\pntext\f1\'B7\tab}branch: Chapter4-01-BoundaryThreadsExample\par
{\pntext\f1\'B7\tab}Project: Ch4-BaseballStatsPostSharp\par
\b0\fs22{\pntext\f1\'B7\tab}Running aspects at the boundaries of methods\fs24\par
\fs22{\pntext\f1\'B7\tab}In even the simplest case, there are boundaries between every method call we can exploit with our mastery of Aspects.\fs24\par
\fs22{\pntext\f1\'B7\tab}tag: Chapter4-01-BattingAverageNoAOP\fs24\par
\fs22{\pntext\f1\'B7\tab}Adding basic MethodBoundary Aspect\fs24\par
{\pntext\f1\'B7\tab}When to use Method Boundary Aspects and when to use Method Interception?\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080 Method Interception allows shared scope across different handlers (as otherwise you'd have a separate boundary method/aspect for On Success, On Exception, On Exit, while these all are handled together in a Method Interception method/aspect)\par
{\pntext\f1\'B7\tab}You could use a field on the Aspect class to share state across methods, but they are statically scoped, so only one Aspect class is created for all instances of a class that uses it.\par
{\pntext\f1\'B7\tab}It's possible to use a property of the MethodExecutionArgs class (MethodExecutionTag) to share state, but it is fairly limited and not the most convenient. If you need to share a lot of state, you may need a whole class to store in the MethodExecutionTag.\par
{\pntext\f1\'B7\tab}But! Method Boundary Aspects can be a lot clearer. You don't need the try/catch/finally, or the args.Proceed() call, as each of these can be handled by a separate Method Boundary Aspect.\par
{\pntext\f1\'B7\tab}\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\fs22 tag: Chapter4-02-BattingAverageBasicAOP\fs24\par
\pard\li360\par
\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\b 2 - ASP.NET HTTP Module bounding\par
{\pntext\f1\'B7\tab}branch: Chapter4-03-ASPNETModules\par
{\pntext\f1\'B7\tab}Project: Ch4-AspNetHttpModuleDemo\par
{\pntext\f1\'B7\tab}\par
\b0{\pntext\f1\'B7\tab}Http Modules allow you to put code at the boundaries of ASP.Net pages.\par
{\pntext\f1\'B7\tab}Have to configure them in web.config\par
{\pntext\f1\'B7\tab}Once you set up event handlers in your module for BeginRequest and EndRequest, you can inject your own code at these seams.\par
\b{\pntext\f1\'B7\tab}tag: Chapter4-03-AspNetBasicModule\b0\par
\pard\li360\par
\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\b Real-World Example: Detecting Mobile Users\par
\b0{\pntext\f1\'B7\tab}Offer a link to your mobile app if they're on a mobile device. Everyone loves that, right???\par
\pard\li360\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\b Project: Ch4-MobileBrowserAspNet\par
{\pntext\f1\'B7\tab}Branch: Ch4-02-ASPNetModules\par
\pard\li360\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\b0 When a user requests a page from a mobile device, present them with a splash page that asks if they want to download the app.\b\par
\b0{\pntext\f1\'B7\tab}We have to make sure that the splash page that is displayed when users request a page doesn't get the call to itself intercepted, and that when they're redirected to the original requested page, they don't get the splash page again.\par
{\pntext\f1\'B7\tab}And to make sure they don't get the splash page before EVERY page. Show it only once (based on Cookie). Code in NoThanks click event handler and the HttpModule we created.\par
\b{\pntext\f1\'B7\tab}tag: Chapter4-04-AspNetMobileBrowserDemo\b0\par
\pard\li360\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\b Real-World Example: Caching\par
\b0{\pntext\f1\'B7\tab}We can use AOP to handle caching as well. We will cache the results of a service call for a Car Value-Finding web app.\par
\pard\li360\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\b Project: Ch4-AspNetCaching\par
{\pntext\f1\'B7\tab}Branch: Ch4-03-ASPNetCaching\par
\pard\li360\b0\par
We make a request to the GetValue service call, which takes 5 seconds. (page: CarValue.aspx)\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\b Tag: Chapter4-05-CarValueNoCaching\par
\pard\li360\b0\par
We want to cache it using PostSharp's OnMethodBoundaryAspect as a base class.\par
We use the method name concatenated to the parameter values as the cache key.\par
\par
We make a method in the Aspect that runs OnEntry of the GetValue method that checks the cache and returns that cache's value instead of continuing on to the bounded method. (setting args.ReturnValue and args.FlowBehavior)\par
\par
We also change around GetValue so it takes only one parameter, so that adding more criteria to the cache doesn't require a lot of maintenance.\par
We serialize the args object to JSON and use that as the cache key in the GetCacheKey method.\par
Now everything is cached correctly.\par
\b Tag: Chapter4-06-CarValueWithCaching\b0\par
\par
\pard\b\fs22\par
\fs28 Chapter 5 - Location Interception\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\b0\fs24 1 - Basics\par
\b{\pntext\f1\'B7\tab}branch: Chapter5-01-BasicLocationInterception\par
{\pntext\f1\'B7\tab}Project: Chapter5-01-BasicLocationInterception\fs22\par
\pard\b0\par
\b Properties can also have aspects applied to them (as .NET just compiles them into methods)\par
\par
The next demo will show how this can be useful for Lazy Loading.\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\b0\fs24 2 - Using Lazy Loading\par
\b{\pntext\f1\'B7\tab}branch: Chapter5-01-BasicLocationInterception\par
{\pntext\f1\'B7\tab}Project: Chapter5-01-BasicLocationInterception\fs22\par
\pard\b0 Let's say we have a property that you don't want to initialize until you call it the first time (maybe the constructor for that type takes a while to run).\par
You can write this code yourself using null checks, or use the Lazy<T> type (shown in the project above)\par
\b\fs24 tag: Chapter5-01-LazyLoadingNoAspects\b0\fs22\par
The annoying thing about that is you then have to do SlowProperty.Value to get the value out of the lazy property.\par
Let's use the power/fun of aspects!\par
\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\b\fs24 branch: Chapter5-02-LazyLoadingWithInterception\par
{\pntext\f1\'B7\tab}Project: Chapter5-02-AOPLazyLoading\par
\pard\li360\par
\pard\b0 After we add this aspect, lazy loading works as usual, and we don't have to worry about the null-checking or locking in each property we want to lazy-load. And we don't have to mess with the Lazy<T> syntax. \b\par
\pard\li360 tag: Chapter5-02-AOPLazyLoading\par
\pard\fs22\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\b0\fs24 3 - Lazy Loading Fields\par
\b{\pntext\f1\'B7\tab}branch: Chapter5-03-LazyLoadingFields\par
{\pntext\f1\'B7\tab}Project: Chapter5-03-LazyLoadingFields\par
\pard\b0\fs22 We have to use reflection for fields, since they aren't converted to Methods like Properties are.\par
This will be tough if the type we want to instantiate has complex dependencies or multiple/ non-parameterless constructors.\b\par
\b0 But it can be done using some DI framework (the book uses StructureMap). I won't put it in this demo but let me know if you care to see it.\par
Same goes for INotifyPropertyChanged (generally for WPF apps)\par
\par
\b\par
\par
\fs28 Chapter 6 - Unit Testing of Aspects and Testing How They Are Applied (Using NUnit)\par
\b0\fs22\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\fs24 1 - Basics\par
\b{\pntext\f1\'B7\tab}branch: Chapter6-01-BasicUnitTestingAspects\par
{\pntext\f1\'B7\tab}Project: Chapter5-01-BasicLocationInterception\fs22\par
\pard\b0\par
There are two types of Unit Testing for aspects:\par
\tab - are they used in the right places (pointcut)\par
\tab - do they function correctly (advice)\par
Pointcuts are the easiest to test (see \b AccountControllerTest\b0  in above project)\par
This just checks to make sure that certain methods contain certain attributes.\par
\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\fs24 2 - Castle DynamicProxy testing\par
\b{\pntext\f1\'B7\tab}branch: Chapter6-02-CastleDynamicProxyTesting\par
{\pntext\f1\'B7\tab}Project: Chapter6-02-CastleDynamicProxyTesting\par
\pard\b0\par
Aspects written with DynamicProxy implement only IInterceptor. They work just like normal POCOs. We can test them as usual (see project above)\par
BUT!\par
They tend to call the method they are attributed to/wrapped around. So if we don't set that up in a test, the test will bomb out.\par
We'll use Moq to mock out the object that uses the aspect.\par
\fs22\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\fs24 3 - Castle DynamicProxy testing with Dependencies\par
\b{\pntext\f1\'B7\tab}branch: Chapter6-03-CastleAspectTestingWithDependencies\par
{\pntext\f1\'B7\tab}Project: Chapter6-03-CastleAspectTestingWithDependencies\par
\pard\b0\fs22 Our example will have a program that calls a service (MyService, implementing IMyService). This service calls another service (MyOtherService, implementing IMyOtherService). MyService also has a Logging Aspect. This aspect calls a service, LoggingService (implements ILoggingService).\par
We'll use StructureMap for DI in this example.\par
\par
We have the MyLoggingAspect aspect that we want to test, and it has a dependency on ILoggingService. We'll mock it out so we can test it.\par
1. MyLoggingAspectTest - We're testing that the aspect uses its dependencies correctly (at least enough for this demo), but not that it's getting used on MyService.\par
\b\fs24 tag: Chapter6-01-CastleAspectTesting-NoDI\par
\par
\b0\fs22 2. \fs24 Then we'll add StructureMap so we don't new up all of our dependencies when the app starts.\par
With StructureMap, we let it control our dependencies.\par
But we're still not testing the logging aspect intercepting calls to MyService.\par
\fs22\par
\par
\par
\par
\par
\par
}
 